@page "/"
@using Models
@inject NavigationManager NavigationManager
@inject GameClient gClient;

<PageTitle>Game Catalog</PageTitle>


<h1>Game Catalog</h1>
<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" class="btn btn-primary" @onclick="CreateGame">New Game</button>
    </div>
    <div class="col-sm-6">
        <input type="text" class="form-control" placeholder="Search Name or Genre" 
        @bind="searchField"   @bind:event="oninput"  @onkeyup="FetchGamesAsync"  />
    </div>
</div>

@if (games == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* sends props to the delete Game Component |Game| Onclose *@
    <DeleteGame Game="@currentGame" OnClose="@onDelModalCloseAsync">

    </DeleteGame>


    <table class="table  ">
        <thead class="table-dark">
            <th>Id</th>
            <th>Name</th>
            <th>Genre</th>
            <th>Price</th>
            <th>Release</th>
            <th></th>
        </thead>
        <tbody class="table-light">
            @foreach (var game in games)
            {

                <tr>
                    <td>@game.Id</td>
                    <td>@game.Name</td>
                    <td>@game.Genre</td>
                    <td>@game.Price</td>
                    <td>@game.ReleasedDate.ToString("MM/dd/yyyy")</td>
                    <td>
                        <button class="btn bg-info" @onclick="(()=>EditGame(game.Id))">
                            <iconify-icon icon="akar-icons:pencil" style="color: white"></iconify-icon>
                        </button>
                        <button class="btn bg-info" @onclick="(()=> currentGame = game)" data-toggle="modal"
                            data-target="#deleteGame">
                            <iconify-icon icon="mdi:bin-outline" style="color: white;"></iconify-icon>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    @* Hold Games list *@
    private Game[]? games;
    @* Game selected for delete *@
    private Game? currentGame { get; set; }

    private String? searchField;
    protected override async Task OnInitializedAsync()
    {

        @* games = await gClient.GetGamesAsync(searchField); *@
        await FetchGamesAsync();
    }

    @* method for navigating to adding a game *@
    private void CreateGame()
    {
        NavigationManager.NavigateTo("/game");
    }
    @* method for navigating to update games when click *@
    private void EditGame(int id)
    {
        NavigationManager.NavigateTo($"/game/{id}");
    }

    private async Task onDelModalCloseAsync(bool decision)
    {
        if (decision)
        {

            await gClient.DeleteGameAsync(currentGame!.Id);
            @* games = await gClient.GetGamesAsync(searchField); *@
            await FetchGamesAsync();
        }
    }

    private async Task FetchGamesAsync()
    {
        games = await gClient.GetGamesAsync(searchField);

    }
}